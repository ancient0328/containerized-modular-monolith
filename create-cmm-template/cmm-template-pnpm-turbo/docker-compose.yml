version: '3.8'

services:
  # APIゲートウェイ
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "40200:40200"
    environment:
      - NODE_ENV=development
      - PORT=40200
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    depends_on:
      - auth
      - module-a
      - module-b
    networks:
      - app-network

  # 認証サービス
  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    ports:
      - "40250:40250"
    environment:
      - NODE_ENV=development
      - PORT=40250
      - JWT_SECRET=your_jwt_secret
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=auth_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    volumes:
      - ./auth:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  # モジュールA
  module-a:
    build:
      context: ./modules/module-a
      dockerfile: Dockerfile
    ports:
      - "40300:40300"
    environment:
      - NODE_ENV=development
      - PORT=40300
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=module_a_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    volumes:
      - ./modules/module-a:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  # モジュールB
  module-b:
    build:
      context: ./modules/module-b
      dockerfile: Dockerfile
    ports:
      - "40310:40310"
    environment:
      - NODE_ENV=development
      - PORT=40310
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=module_b_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    volumes:
      - ./modules/module-b:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  # Webフロントエンド
  web-frontend:
    build:
      context: ./frontend/web
      dockerfile: Dockerfile
    ports:
      - "40000:40000"
    environment:
      - NODE_ENV=development
      - PORT=40000
      - API_URL=http://api-gateway:40200
    volumes:
      - ./frontend/web:/app
      - /app/node_modules
    networks:
      - app-network

  # モバイルフロントエンド
  mobile-frontend:
    build:
      context: ./frontend/mobile
      dockerfile: Dockerfile
    ports:
      - "40100:40100"
    environment:
      - NODE_ENV=development
      - PORT=40100
      - API_URL=http://api-gateway:40200
    volumes:
      - ./frontend/mobile:/app
      - /app/node_modules
    networks:
      - app-network

  # PostgreSQLデータベース
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=auth_db,module_a_db,module_b_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres:/docker-entrypoint-initdb.d
    networks:
      - app-network

  # Redisキャッシュ
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  # Prometheusモニタリング
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - app-network

  # Grafanaダッシュボード
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./config/grafana:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
